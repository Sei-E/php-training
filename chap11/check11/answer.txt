1.空欄を埋めよ
    ①クロスサイトスクリプティング
    ②エスケープ処理
    ③SQLインジェクション
    ④SQL
    ⑤クロスサイトリクエストフォージェリ
    ⑥パストラバーサル
    ⑦メールヘッダインジェクション
    ⑧スパムメール
    ⑨セッションハイジャック
    ⑩セッションID
    ⑪require_once
    ⑫eval

2.正誤判定
    (◯)XSS脆弱性を回避する基本は、スーパーグローバル変数の内容をエスケープ処理することである。

    (×)すべての出力をHTMLエスケープすればXSS脆弱性は必ず防げる
        ➔JavaScript疑似プロトコルへの対策や不正な文字入力によるタグの破壊対策の入力値の妥当性検証も必要。

    (×)SQLインジェクションを回避する最良の方法は、個々の値を手動でSQLエスケープすることである。
        ➔手動では面倒かつ記述漏れの原因ともなるため、PDOなどのクラスのプレイスホルダ機能などで自動で処理すべき。

    (×)OSコマンドはパフォーマンス的に有利なので、積極的に利用すると良い。
        脆弱性があった場合に致命的な問題になることやそもそもライブラリなどで代替できるためできるだけ利用するべきではない。

    (×)CSRF攻撃は、ページに対して認証を施しておけば防げる。
        ユーザがサイトに対して認証済みの状態であればその権限を利用してページにアクセスしてしまうため防ぐことはできない。

    (◯)パストラバーサル脆弱性を防ぐ基本は、ファイルパスをクライアント/サーバ間で直接に受け渡ししないことである。

    (×)入力値の検証をしていれば、セキュリティ的な対策が不十分でも安心である。
        ➔入力値の検証はあくまでセキュリティ対策の第一歩であり、複数の対策を組み合わせる多重防御を基本とすべきである。

    (×)検証処理をサーバ/クライアント双方で実装するのは非効率なので、クライアントサイド処理で一元化するのが望ましい。
        ➔JavaScriptは改ざんが容易でありクライアント側で無効にすることもできるため、検証をすり抜けられないよう最終的な検証は必ずサーバサイドで行うべき。
